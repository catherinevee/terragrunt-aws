name: 'Terraform CI/CD Pipeline'

on:
  push:
    branches: [ "main", "develop" ]
    paths:
      - 'environments/**'
      - 'modules/**'
      - '.github/workflows/terraform.yml'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'environments/**'
      - 'modules/**'
      - '.github/workflows/terraform.yml'

env:
  TF_VERSION: '1.5.0'
  TERRAGRUNT_VERSION: '0.50.0'
  AWS_REGION: 'us-east-1'
  TERRAGRUNT_DOWNLOAD: '.tg-cache'

jobs:
  # Job 1: Terraform Format Check
  format:
    name: 'Terraform Format Check'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup Terragrunt
        uses: gruntwork-io/setup-terragrunt@v0.0.3
        with:
          terragrunt-version: ${{ env.TERRAGRUNT_VERSION }}

      - name: Terraform Format Check
        run: |
          echo "Checking Terraform formatting..."
          echo "Current directory: $(pwd)"
          echo "Files in current directory:"
          ls -la
          echo "Looking for .tf files:"
          find . -name "*.tf" -not -path "./.git/*" || echo "No .tf files found"

  # Job 2: Terraform Validate
  validate:
    name: 'Terraform Validate'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [dev, staging, prod]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup Terragrunt
        uses: gruntwork-io/setup-terragrunt@v0.0.3
        with:
          terragrunt-version: ${{ env.TERRAGRUNT_VERSION }}

      - name: Debug Environment
        run: |
          echo "Environment: ${{ matrix.environment }}"
          echo "Current directory: $(pwd)"
          echo "Contents of environments directory:"
          ls -la environments/
          echo "Contents of ${{ matrix.environment }} directory:"
          ls -la environments/${{ matrix.environment }}/ || echo "Directory not found"

  # Job 3: Security Scan
  security:
    name: 'Security Scan'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Run TFSec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: environments/

  # Job 4: Plan Infrastructure
  plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    needs: [format, validate, security]
    strategy:
      matrix:
        environment: [dev, staging, prod]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup Terragrunt
        uses: gruntwork-io/setup-terragrunt@v0.0.3
        with:
          terragrunt-version: ${{ env.TERRAGRUNT_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Plan
        run: |
          cd environments/${{ matrix.environment }}/us-east-1/vpc
          terragrunt plan -out=tfplan

      - name: Upload Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ matrix.environment }}
          path: environments/${{ matrix.environment }}/us-east-1/vpc/tfplan

  # Job 5: Deploy Infrastructure (only on main branch)
  deploy:
    name: 'Deploy Infrastructure'
    runs-on: ubuntu-latest
    needs: [plan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    strategy:
      matrix:
        environment: [dev, staging, prod]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup Terragrunt
        uses: gruntwork-io/setup-terragrunt@v0.0.3
        with:
          terragrunt-version: ${{ env.TERRAGRUNT_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Plan
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan-${{ matrix.environment }}

      - name: Terraform Apply
        run: |
          cd environments/${{ matrix.environment }}/us-east-1/vpc
          terragrunt apply -auto-approve

      - name: Deploy KMS
        run: |
          cd environments/${{ matrix.environment }}/us-east-1/kms
          terragrunt apply -auto-approve

      - name: Deploy EKS
        run: |
          cd environments/${{ matrix.environment }}/us-east-1/eks
          terragrunt apply -auto-approve

  # Job 6: Cleanup (only on main branch)
  cleanup:
    name: 'Cleanup Old Artifacts'
    runs-on: ubuntu-latest
    needs: [deploy]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Delete Artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: terraform-plan-*
