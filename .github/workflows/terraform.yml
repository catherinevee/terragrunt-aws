name: 'Terraform CI/CD Pipeline'

on:
  push:
    branches: [ "main", "develop" ]
    paths:
      - 'environments/**'
      - 'modules/**'
      - '.github/workflows/terraform.yml'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'environments/**'
      - 'modules/**'
      - '.github/workflows/terraform.yml'

env:
  TF_VERSION: '1.6.0'
  TERRAGRUNT_VERSION: '0.58.0'
  AWS_REGION: 'us-east-1'
  TERRAGRUNT_DOWNLOAD: '.tg-cache'

jobs:
  # Job 1: Terraform Format Check
  format:
    name: 'Terraform Format Check'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        run: |
          echo "=== Terraform Format Check ==="
          echo "Current directory: $(pwd)"
          echo "Looking for .tf files:"
          find . -name "*.tf" -not -path "./.git/*" || echo "No .tf files found"
          if find . -name "*.tf" -not -path "./.git/*" -print -quit | grep -q .; then
            echo "Running terraform fmt -check -diff..."
            find . -name "*.tf" -not -path "./.git/*" -exec terraform fmt -check -diff {} \;
          else
            echo "No Terraform files found to check"
          fi

  # Job 2: Terraform Validate
  validate:
    name: 'Terraform Validate'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - environment: dev
            region: us-east-1
          - environment: staging
            region: us-west-2
          - environment: prod
            region: eu-west-1
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup Terragrunt (Working Action)
        uses: autero1/action-terragrunt@v1.2.0
        with:
          terragrunt_version: ${{ env.TERRAGRUNT_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ matrix.region }}

      - name: Terraform Init
        run: |
          echo "=== Initializing Terragrunt for ${{ matrix.environment }} in ${{ matrix.region }} ==="
          cd environments/${{ matrix.environment }}/${{ matrix.region }}/vpc
          # Clear any existing cache and state
          rm -rf .terragrunt-cache .tg-cache .terraform
          # Use a unique cache directory for each run
          export TERRAGRUNT_DOWNLOAD=".tg-cache-$(date +%s)"
          terragrunt init --terragrunt-non-interactive

      - name: Terraform Validate
        run: |
          echo "=== Validating Terraform for ${{ matrix.environment }} in ${{ matrix.region }} ==="
          cd environments/${{ matrix.environment }}/${{ matrix.region }}/vpc
          terragrunt validate

  # Job 3: Security Scan (temporarily disabled)
  # security:
  #   name: 'Security Scan'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v3
  #       with:
  #         terraform_version: ${{ env.TF_VERSION }}

  #     - name: Run TFSec
  #       uses: aquasecurity/tfsec-action@v1.0.3
  #       with:
  #         working_directory: environments/

  # Job 4: Plan Infrastructure
  plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    needs: [format, validate]
    strategy:
      matrix:
        include:
          - environment: dev
            region: us-east-1
          - environment: staging
            region: us-west-2
          - environment: prod
            region: eu-west-1
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Install Terragrunt Manually
        run: |
          wget https://github.com/gruntwork-io/terragrunt/releases/download/v${{ env.TERRAGRUNT_VERSION }}/terragrunt_linux_amd64
          chmod +x terragrunt_linux_amd64
          sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ matrix.region }}

      - name: Terraform Plan
        run: |
          echo "=== Planning Infrastructure for ${{ matrix.environment }} in ${{ matrix.region }} ==="
          cd environments/${{ matrix.environment }}/${{ matrix.region }}/vpc
          terragrunt plan

  # Job 5: Deploy Infrastructure (only on main branch) - Different regions
  deploy:
    name: 'Deploy Infrastructure'
    runs-on: ubuntu-latest
    needs: [plan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    strategy:
      matrix:
        include:
          - environment: dev
            region: us-east-1
          - environment: staging
            region: us-west-2
          - environment: prod
            region: eu-west-1
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Install Terragrunt Manually
        run: |
          wget https://github.com/gruntwork-io/terragrunt/releases/download/v${{ env.TERRAGRUNT_VERSION }}/terragrunt_linux_amd64
          chmod +x terragrunt_linux_amd64
          sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ matrix.region }}

      - name: Deploy VPC
        run: |
          echo "=== Deploying VPC for ${{ matrix.environment }} in ${{ matrix.region }} ==="
          cd environments/${{ matrix.environment }}/${{ matrix.region }}/vpc
          terragrunt apply -auto-approve
