name: 'Terraform CI/CD Pipeline'

on:
  push:
    branches: [ "main", "develop" ]
    paths:
      - 'environments/**'
      - 'modules/**'
      - '.github/workflows/terraform.yml'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'environments/**'
      - 'modules/**'
      - '.github/workflows/terraform.yml'
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - destroy
          - validate-only
      environment:
        description: 'Environment to target (all, dev, staging, prod)'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - dev
          - staging
          - prod
      region:
        description: 'Region to target (all, us-east-1, us-west-2, eu-west-1)'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - us-east-1
          - us-west-2
          - eu-west-1
      confirm_destroy:
        description: 'Type "DESTROY" to confirm infrastructure destruction (only for destroy action)'
        required: false
        type: string

env:
  TF_VERSION: '1.6.0'
  TERRAGRUNT_VERSION: '0.58.0'
  AWS_REGION: 'us-east-1'
  TERRAGRUNT_DOWNLOAD: '.tg-cache'

jobs:
  # Job 1: Validate Destroy Confirmation (only for destroy action)
  validate-destroy:
    name: 'Validate Destroy Confirmation'
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    steps:
      - name: Check Confirmation
        run: |
          if [ "${{ github.event.inputs.confirm_destroy }}" != "DESTROY" ]; then
            echo "❌ Destroy confirmation failed. You must type 'DESTROY' to proceed."
            exit 1
          fi
          echo "✅ Destroy confirmation validated."

  # Job 2: Terraform Format Check
  format:
    name: 'Terraform Format Check'
    runs-on: ubuntu-latest
    needs: [validate-destroy]
    if: always() && (needs.validate-destroy.result == 'success' || needs.validate-destroy.result == 'skipped')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        run: |
          echo "=== Terraform Format Check ==="
          echo "Current directory: $(pwd)"
          echo "Looking for .tf files:"
          find . -name "*.tf" -not -path "./.git/*" || echo "No .tf files found"
          if find . -name "*.tf" -not -path "./.git/*" -print -quit | grep -q .; then
            echo "Running terraform fmt -check -diff..."
            find . -name "*.tf" -not -path "./.git/*" -exec terraform fmt -check -diff {} \;
          else
            echo "No Terraform files found to check"
          fi

  # Job 3: Terraform Validate
  validate:
    name: 'Terraform Validate'
    runs-on: ubuntu-latest
    needs: [format]
    strategy:
      matrix:
        include:
          - environment: dev
            region: us-east-1
          - environment: staging
            region: us-west-2
          - environment: prod
            region: eu-west-1
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup Terragrunt (Working Action)
        uses: autero1/action-terragrunt@v1.2.0
        with:
          terragrunt_version: ${{ env.TERRAGRUNT_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ matrix.region }}

      - name: Terraform Init
        run: |
          echo "=== Initializing Terragrunt for ${{ matrix.environment }} in ${{ matrix.region }} ==="
          cd environments/${{ matrix.environment }}/${{ matrix.region }}/vpc
          # Clear any existing cache and state
          rm -rf .terragrunt-cache .tg-cache .terraform
          # Use a unique cache directory for each run
          export TERRAGRUNT_DOWNLOAD=".tg-cache-$(date +%s)"
          terragrunt init --terragrunt-non-interactive

      - name: Terraform Validate
        run: |
          echo "=== Validating Terraform for ${{ matrix.environment }} in ${{ matrix.region }} ==="
          cd environments/${{ matrix.environment }}/${{ matrix.region }}/vpc
          terragrunt validate

  # Job 4: Security Scan (optional)
  security:
    name: 'Security Scan'
    runs-on: ubuntu-latest
    needs: [validate]
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Run TFSec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: environments/

  # Job 5: Plan Infrastructure
  plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    needs: [validate]
    if: github.event_name == 'pull_request' || github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'deploy')
    strategy:
      matrix:
        include:
          - environment: dev
            region: us-east-1
          - environment: staging
            region: us-west-2
          - environment: prod
            region: eu-west-1
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Install Terragrunt Manually
        run: |
          wget https://github.com/gruntwork-io/terragrunt/releases/download/v${{ env.TERRAGRUNT_VERSION }}/terragrunt_linux_amd64
          chmod +x terragrunt_linux_amd64
          sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ matrix.region }}

      - name: Terraform Plan
        run: |
          echo "=== Planning Infrastructure for ${{ matrix.environment }} in ${{ matrix.region }} ==="
          cd environments/${{ matrix.environment }}/${{ matrix.region }}/vpc
          terragrunt plan

  # Job 6: Deploy Infrastructure
  deploy:
    name: 'Deploy Infrastructure'
    runs-on: ubuntu-latest
    needs: [plan]
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'deploy')
    strategy:
      matrix:
        include:
          - environment: dev
            region: us-east-1
          - environment: staging
            region: us-west-2
          - environment: prod
            region: eu-west-1
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Install Terragrunt Manually
        run: |
          wget https://github.com/gruntwork-io/terragrunt/releases/download/v${{ env.TERRAGRUNT_VERSION }}/terragrunt_linux_amd64
          chmod +x terragrunt_linux_amd64
          sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ matrix.region }}

      - name: Deploy VPC
        run: |
          echo "=== Deploying VPC for ${{ matrix.environment }} in ${{ matrix.region }} ==="
          cd environments/${{ matrix.environment }}/${{ matrix.region }}/vpc
          terragrunt apply -auto-approve

      - name: Deploy KMS
        run: |
          echo "=== Deploying KMS for ${{ matrix.environment }} in ${{ matrix.region }} ==="
          cd environments/${{ matrix.environment }}/${{ matrix.region }}/kms
          terragrunt apply -auto-approve

      - name: Deploy EKS
        run: |
          echo "=== Deploying EKS for ${{ matrix.environment }} in ${{ matrix.region }} ==="
          cd environments/${{ matrix.environment }}/${{ matrix.region }}/eks
          terragrunt apply -auto-approve

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ matrix.region }} --name ${{ matrix.environment }}-cluster

      - name: Verify deployment
        run: |
          kubectl get nodes
          kubectl get pods --all-namespaces

  # Job 7: Destroy Infrastructure
  destroy:
    name: 'Terraform Destroy'
    runs-on: ubuntu-latest
    needs: [validate]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    strategy:
      matrix:
        include:
          - environment: dev
            region: us-east-1
          - environment: staging
            region: us-west-2
          - environment: prod
            region: eu-west-1
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Install Terragrunt Manually
        run: |
          wget https://github.com/gruntwork-io/terragrunt/releases/download/v${{ env.TERRAGRUNT_VERSION }}/terragrunt_linux_amd64
          chmod +x terragrunt_linux_amd64
          sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ matrix.region }}

      - name: Destroy EKS
        run: |
          echo "=== Destroying EKS for ${{ matrix.environment }} in ${{ matrix.region }} ==="
          cd environments/${{ matrix.environment }}/${{ matrix.region }}/eks
          terragrunt destroy -auto-approve || true

      - name: Destroy KMS
        run: |
          echo "=== Destroying KMS for ${{ matrix.environment }} in ${{ matrix.region }} ==="
          cd environments/${{ matrix.environment }}/${{ matrix.region }}/kms
          terragrunt destroy -auto-approve || true

      - name: Destroy VPC
        run: |
          echo "=== Destroying VPC for ${{ matrix.environment }} in ${{ matrix.region }} ==="
          cd environments/${{ matrix.environment }}/${{ matrix.region }}/vpc
          terragrunt destroy -auto-approve || true

      - name: Clean up S3 state bucket
        if: matrix.environment == 'dev' && matrix.region == 'us-east-1'
        run: |
          echo "=== Cleaning up S3 state bucket for ${{ matrix.environment }} in ${{ matrix.region }} ==="
          aws s3 rm s3://terragrunt-$(aws sts get-caller-identity --query Account --output text)-state-us-east-1-20250913095334 --recursive || true
          aws s3 rb s3://terragrunt-$(aws sts get-caller-identity --query Account --output text)-state-us-east-1-20250913095334 || true

      - name: Clean up S3 state bucket
        if: matrix.environment == 'staging' && matrix.region == 'us-west-2'
        run: |
          echo "=== Cleaning up S3 state bucket for ${{ matrix.environment }} in ${{ matrix.region }} ==="
          aws s3 rm s3://terragrunt-$(aws sts get-caller-identity --query Account --output text)-state-us-west-2-20250913095334 --recursive || true
          aws s3 rb s3://terragrunt-$(aws sts get-caller-identity --query Account --output text)-state-us-west-2-20250913095334 || true

      - name: Clean up S3 state bucket
        if: matrix.environment == 'prod' && matrix.region == 'eu-west-1'
        run: |
          echo "=== Cleaning up S3 state bucket for ${{ matrix.environment }} in ${{ matrix.region }} ==="
          aws s3 rm s3://terragrunt-$(aws sts get-caller-identity --query Account --output text)-state-eu-west-1-20250913095334 --recursive || true
          aws s3 rb s3://terragrunt-$(aws sts get-caller-identity --query Account --output text)-state-eu-west-1-20250913095334 || true

      - name: Clean up DynamoDB table
        if: matrix.environment == 'dev' && matrix.region == 'us-east-1'
        run: |
          echo "=== Cleaning up DynamoDB table for ${{ matrix.environment }} in ${{ matrix.region }} ==="
          aws dynamodb delete-table --table-name terraform-locks-us-east-1-20250913095334 || true

      - name: Clean up DynamoDB table
        if: matrix.environment == 'staging' && matrix.region == 'us-west-2'
        run: |
          echo "=== Cleaning up DynamoDB table for ${{ matrix.environment }} in ${{ matrix.region }} ==="
          aws dynamodb delete-table --table-name terraform-locks-us-west-2-20250913095334 || true

      - name: Clean up DynamoDB table
        if: matrix.environment == 'prod' && matrix.region == 'eu-west-1'
        run: |
          echo "=== Cleaning up DynamoDB table for ${{ matrix.environment }} in ${{ matrix.region }} ==="
          aws dynamodb delete-table --table-name terraform-locks-eu-west-1-20250913095334 || true

  # Job 8: Final Cleanup (only for destroy action)
  final-cleanup:
    name: 'Final Cleanup'
    runs-on: ubuntu-latest
    needs: [destroy]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy' && always()
    steps:
      - name: Cleanup Summary
        run: |
          echo "=== Infrastructure Destruction Complete ==="
          echo "✅ All VPCs destroyed"
          echo "✅ All KMS keys destroyed"
          echo "✅ All EKS clusters destroyed"
          echo "✅ All S3 state buckets cleaned up"
          echo "✅ All DynamoDB tables cleaned up"
          echo "✅ Multi-region infrastructure fully destroyed"