name: 'Terratest CI/CD Pipeline'

on:
  push:
    branches: [ "main", "develop" ]
    paths:
      - 'test/**'
      - 'modules/**'
      - '.github/workflows/terratest.yml'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'test/**'
      - 'modules/**'
      - '.github/workflows/terratest.yml'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - vpc
          - s3
          - security-groups
      environment:
        description: 'Environment to test against'
        required: true
        default: 'test'
        type: choice
        options:
          - test
          - dev
          - staging
      region:
        description: 'AWS region to test in'
        required: true
        default: 'us-east-2'
        type: choice
        options:
          - us-east-2
          - us-west-2
          - us-east-1
          - eu-west-1

env:
  TF_VERSION: '1.6.0'
  TERRAGRUNT_VERSION: '0.58.0'
  GO_VERSION: '1.21'
  AWS_REGION: 'us-east-2'
  TERRATEST_DIR: './test'

jobs:
  setup:
    name: 'Setup Environment'
    runs-on: ubuntu-latest
    outputs:
      selected_test_type: ${{ steps.set_test_type.outputs.test_type }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Install Terragrunt
        run: |
          wget https://github.com/gruntwork-io/terragrunt/releases/download/v${{ env.TERRAGRUNT_VERSION }}/terragrunt_linux_amd64
          chmod +x terragrunt_linux_amd64
          sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify test directory
        run: |
          if [ -d "test" ]; then
            echo "Test directory found"
            ls -la test/
          else
            echo "Test directory not found"
            exit 1
          fi

      - name: Go Mod Download
        working-directory: ${{ env.TERRATEST_DIR }}
        run: |
          echo "Downloading Go modules..."
          go mod download
          echo "Go modules downloaded successfully"

      - name: Set selected test type
        id: set_test_type
        run: echo "test_type=${{ github.event.inputs.test_type || 'all' }}" >> "$GITHUB_OUTPUT"

  lint:
    name: 'Lint Checks'
    runs-on: ubuntu-latest
    needs: setup
    if: |
      needs.setup.outputs.selected_test_type == 'all' ||
      needs.setup.outputs.selected_test_type == 'vpc' ||
      needs.setup.outputs.selected_test_type == 's3' ||
      needs.setup.outputs.selected_test_type == 'security-groups'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.55.2
          working-directory: ${{ env.TERRATEST_DIR }}
          args: --timeout=5m

  unit-tests:
    name: 'Unit Tests'
    runs-on: ubuntu-latest
    needs: setup
    if: |
      needs.setup.outputs.selected_test_type == 'all' ||
      needs.setup.outputs.selected_test_type == 'vpc' ||
      needs.setup.outputs.selected_test_type == 's3' ||
      needs.setup.outputs.selected_test_type == 'security-groups'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      - name: Install Terragrunt
        run: |
          wget https://github.com/gruntwork-io/terragrunt/releases/download/v${{ env.TERRAGRUNT_VERSION }}/terragrunt_linux_amd64
          chmod +x terragrunt_linux_amd64
          sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: Linux-go-${{ hashFiles('test/go.sum') }}
          restore-keys: Linux-go-
      - name: Go Mod Download
        working-directory: ${{ env.TERRATEST_DIR }}
        run: go mod download
      - name: Run unit tests
        working-directory: ${{ env.TERRATEST_DIR }}
        run: |
          echo "Running unit tests..."
          go test -v -short -race -coverprofile=coverage.out ./...
          echo "Unit tests completed successfully"
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./test/coverage.out
          flags: unittests
          name: codecov-umbrella

  integration-tests:
    name: 'Integration Tests - ${{ matrix.environment }} (${{ matrix.region }})'
    runs-on: ubuntu-latest
    needs: setup
    if: |
      needs.setup.outputs.selected_test_type == 'all' ||
      needs.setup.outputs.selected_test_type == 'vpc' ||
      needs.setup.outputs.selected_test_type == 's3' ||
      needs.setup.outputs.selected_test_type == 'security-groups'
    strategy:
      matrix:
        include:
          - environment: test
            region: us-east-2
            test_name: VPC
          - environment: test
            region: us-east-2
            test_name: S3
          - environment: test
            region: us-east-2
            test_name: SecurityGroups
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      - name: Install Terragrunt
        run: |
          wget https://github.com/gruntwork-io/terragrunt/releases/download/v${{ env.TERRAGRUNT_VERSION }}/terragrunt_linux_amd64
          chmod +x terragrunt_linux_amd64
          sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ matrix.region }}
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: Linux-go-${{ hashFiles('test/go.sum') }}
          restore-keys: Linux-go-
      - name: Install dependencies
        working-directory: ${{ env.TERRATEST_DIR }}
        run: |
          echo "Installing dependencies..."
          go mod download
          go mod tidy
          echo "Dependencies installed successfully"
      - name: Run specific integration test
        working-directory: ${{ env.TERRATEST_DIR }}
        run: |
          echo "Running ${{ matrix.test_name }} tests in ${{ matrix.region }}"
          go test -v -timeout=30m -run "Test${{ matrix.test_name }}.*" ./...
          echo "Integration tests completed successfully"

  security-scan:
    name: 'Security Scan (gosec)'
    runs-on: ubuntu-latest
    needs: setup
    if: |
      needs.setup.outputs.selected_test_type == 'all' ||
      needs.setup.outputs.selected_test_type == 'vpc' ||
      needs.setup.outputs.selected_test_type == 's3' ||
      needs.setup.outputs.selected_test_type == 'security-groups'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Run Gosec
        uses: securego/gosec@master
        with:
          args: './...'
          working-directory: ${{ env.TERRATEST_DIR }}

  performance-tests:
    name: 'Performance Tests'
    runs-on: ubuntu-latest
    needs: setup
    if: |
      needs.setup.outputs.selected_test_type == 'all' ||
      needs.setup.outputs.selected_test_type == 'vpc' ||
      needs.setup.outputs.selected_test_type == 's3' ||
      needs.setup.outputs.selected_test_type == 'security-groups'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: Linux-go-${{ hashFiles('test/go.sum') }}
          restore-keys: Linux-go-
      - name: Go Mod Download
        working-directory: ${{ env.TERRATEST_DIR }}
        run: go mod download
      - name: Run Performance Tests
        working-directory: ${{ env.TERRATEST_DIR }}
        run: |
          echo "Running performance tests..."
          go test -v -bench=. -run=^# -timeout 30m ./...
          echo "Performance tests completed successfully"

  test-report:
    name: 'Generate Test Report'
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests, security-scan, performance-tests]
    if: always()
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Generate test report
        run: |
          echo "# Terratest Results" > test-report.md
          echo "" >> test-report.md
          echo "## Test Status" >> test-report.md
          echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> test-report.md
          echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> test-report.md
          echo "- All Tests: ${{ needs.unit-tests.result }}" >> test-report.md
          echo "- Security Scan: ${{ needs.security-scan.result }}" >> test-report.md
          echo "" >> test-report.md
          echo "## Test Coverage" >> test-report.md
          echo "Test coverage details will be available in the unit tests job." >> test-report.md
      - name: Upload test report
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: test-report.md
          if-no-files-found: warn

  test-results-summary:
    name: 'Test Results Summary'
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, security-scan, performance-tests]
    if: always()
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Test Results Summary
        run: |
          echo "=== Test Results Summary ==="
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          echo "All Tests: ${{ needs.unit-tests.result }}"
          echo ""
          if [ "${{ needs.unit-tests.result }}" = "success" ] && [ "${{ needs.integration-tests.result }}" = "success" ]; then
            echo "✅ All tests passed successfully!"
          else
            echo "❌ Some tests failed. Please check the logs above."
            exit 1
          fi